{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMAR7ekWxCwA1+0bGw+QBfl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pratiksha010/one/blob/main/File-2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o0R9wyjiWKQ5"
      },
      "outputs": [],
      "source": [
        "print('Hello World')\n",
        "\n",
        "print('Good Morning')\n",
        "\n",
        "# identifiers in python  ---- variables\n",
        "\n",
        "# variables allowed in Python\n",
        "\n",
        "'''\n",
        "i_am\n",
        "iam\n",
        "_i_am\n",
        "_I_AM\n",
        "I_AM\n",
        "i_am_1\n",
        "i_am_1\n",
        "'''\n",
        "\n",
        "# variables not allowed in Python\n",
        "\n",
        "# Commented out IPython magic to ensure Python compatibility.\n",
        "'''\n",
        "@cool_1\n",
        "#we_1\n",
        "1_one\n",
        "# %temp%\n",
        "'''\n",
        "\n",
        "# variables allowed in Python but not recommended \"dunder\" = double undescore , reserved keywords\n",
        "\n",
        "'''\n",
        "_temp_\n",
        "_class_\n",
        "for\n",
        "var\n",
        "time\n",
        "'''\n",
        "\n",
        "import keyword\n",
        "\n",
        "print(keyword.kwlist)\n",
        "\n",
        "# comment in python\n",
        "\n",
        "# line1\n",
        "# line 2\n",
        "\n",
        "# line 3\n",
        "\n",
        "\n",
        "#int\n",
        "x = 10\n",
        "print(x)\n",
        "print(type(x))\n",
        "\n",
        "#boolean\n",
        "x = True\n",
        "print(x)\n",
        "print(type(x))\n",
        "\n",
        "# str\n",
        "x = 'chinmay'\n",
        "print(x)\n",
        "print(type(x))\n",
        "\n",
        "# str\n",
        "x = 'a'\n",
        "print(x)\n",
        "print(type(x))\n",
        "\n",
        "x = 10.0\n",
        "print(x)\n",
        "print(type(x))\n",
        "\n",
        "\n",
        "# comparison operator\n",
        "# < , > , <= , >= , != , == \n",
        "\n",
        "a = 10\n",
        "b = 5\n",
        "print(a > b)\n",
        "print(5 <= 5)\n",
        "print(9 >= 8)\n",
        "print(9 != 8)\n",
        "print(1 == 1)\n",
        "print(67 < 66)\n",
        "\n",
        "\n",
        "# logical operator \n",
        "# and or not\n",
        "\n",
        "# and \n",
        "# True  True  ---> True\n",
        "# False True  ---> False\n",
        "# True  False ---> False\n",
        "# False False ---> False\n",
        "\n",
        "# or\n",
        "# True  True  ---> True\n",
        "# False True  ---> True\n",
        "# True  False ---> True\n",
        "# False False ---> False\n",
        "\n",
        "# not\n",
        "#True  False \n",
        "#False True\n",
        "\n",
        "\"\"\" Examples\"\"\"\n",
        "print(6 > 5 and 7 == 7)\n",
        "print(6 > 5 and 7 != 7)\n",
        "print(6 < 5 and 7 == 7)\n",
        "print(6 == 7 and 8 != 8)\n",
        "\n",
        "print(6 > 5 or 7 == 7) \n",
        "\n",
        "x = 10\n",
        "print(x)\n",
        "\n",
        "# Introvert     // Extrovert\n",
        "# calm          // speaks more\n",
        "# less social   // loud\n",
        "# speaks less   // more social\n",
        "\n",
        "y = 100\n",
        "printüëç\n",
        "print(type(y))\n",
        "# int ---- 89 , -12 ,0\n",
        "\n",
        "t = 10.0\n",
        "print(t)\n",
        "print(type(t))\n",
        "# float --- decimal points\n",
        "\n",
        "i = \"chinmay\"\n",
        "print(i)\n",
        "print(type(i))\n",
        "#str --- 'c', \"chinmay\",\"chinmay010\",\"chin7@\"\n",
        "\n",
        "k = 'A'\n",
        "print(k)\n",
        "print(type(k))\n",
        "\n",
        "l = True\n",
        "print(l)\n",
        "print(type(l))\n",
        "# boolean True or False\n",
        "# int , float, boolean , string\n",
        "\n",
        "# variables -- indentifier \n",
        "\n",
        "# A-Z  - City\n",
        "# a-z  - city123\n",
        "# _    - _newCity\n",
        "\n",
        "# 9hello -  invalid\n",
        "# 9qwerty - invalid\n",
        "# %hello - invalid\n",
        "\n",
        "# comparison  < , > , <= , >= , != \n",
        "# entity  <  entity -----> boolean\n",
        "\n",
        "s = 10\n",
        "t = 5\n",
        "print(5 > 10)\n",
        "print(5 == 5)\n",
        "print(5 <= 6)\n",
        "print(5 >= 6)\n",
        "print(5 != 7)\n",
        "print(6 < 8)\n",
        "\n",
        "# logical operator\n",
        "# and or and not\n",
        "\n",
        "# and \n",
        "# True  and  True ------>  True\n",
        "# False and  True ------>  False\n",
        "# True  and  False ------> False\n",
        "# False and  False ------> False\n",
        "\n",
        "print(5 == 5 and 7 > 6)  # True\n",
        "print(5 != 5 and 7 > 6)  # False\n",
        "print(5 == 5 and 7 < 6)  # False\n",
        "print(5 != 5 and 7 < 6)  # False\n",
        "\n",
        "\n",
        "# or \n",
        "# True  or  True ------>  True\n",
        "# False or  True ------>  True\n",
        "# True  or  False ------> True\n",
        "# False or  False ------> False\n",
        "\n",
        "print(5 == 5 or 7 > 6)  # True\n",
        "print(5 != 5 or 7 > 6)  # True\n",
        "print(5 == 5 or 7 < 6)  # True\n",
        "print(5 != 5 or 7 < 6)  # False\n",
        "\n",
        "#not\n",
        "#True  -- False\n",
        "#False -- True \n",
        "\n",
        "print(not True)\n",
        "print(not False)\n"
      ]
    }
  ]
}